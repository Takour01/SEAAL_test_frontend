@use "sass:math";

$grid-columns: 12;
$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);
$layout-values: flex-start, flex-end, center, space-between, space-around;

$justify-values : (
  "c":center,
  "s":flex-start,
  "e":flex-end,
  "sb": space-between,
  "se":space-evenly,
  "sr":space-around,
);
$align-values : (
  "c":center,
  "s":flex-start,
  "e":flex-end,
);

$wrap : (
  "r": wrap-reverse,
  "n" : nowrap,
  "": wrap 
);


// base layout classes
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}
.row {
  display: flex;
  flex-flow: row wrap;
}


 @each $key , $val in $wrap{
  @if ($key == ""){
    .wrap{
      flex-wrap: $val;
    }
  } @else {
    .wrap-#{$key}{
      flex-wrap: $val;
    }
  }


 }


// grid gaps
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
  // .gap-#{$key} {
  //   gap: $val;
  // }
}

// justify content classes
@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}

// col classes
@include xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
  $med : "xs";
  @each $key , $val in $align-values{
    @each $k , $v in $justify-values{
      .col-#{$key}-#{$k}-#{$med}{
        display: flex;
        flex-direction: column;
        justify-content: $v;
        align-items: $val;
      }
      .row-#{$key}-#{$k}-#{$med}{
        display: flex;
        flex-direction: row;
        justify-content: $v;
        align-items: $val;
      }
    }
  }
}
@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
  $med : "sm";
  @each $key , $val in $align-values{
    @each $k , $v in $justify-values{
      .col-#{$key}-#{$k}-#{$med}{
        display: flex;
        flex-direction: column;
        justify-content: $v;
        align-items: $val;
      }
      .row-#{$key}-#{$k}-#{$med}{
        display: flex;
        flex-direction: row;
        justify-content: $v;
        align-items: $val;
      }
    }
  }
}
@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
  $med : "md";
  @each $key , $val in $align-values{
    @each $k , $v in $justify-values{
      .col-#{$key}-#{$k}-#{$med}{
        display: flex;
        flex-direction: column;
        justify-content: $v;
        align-items: $val;
      }
      .row-#{$key}-#{$k}-#{$med}{
        display: flex;
        flex-direction: row;
        justify-content: $v;
        align-items: $val;
      }
    }
  }
}
@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
  $med : "lg";
  @each $key , $val in $align-values{
    @each $k , $v in $justify-values{
      .col-#{$key}-#{$k}-#{$med}{
        display: flex;
        flex-direction: column;
        justify-content: $v;
        align-items: $val;
      }
      .row-#{$key}-#{$k}-#{$med}{
        display: flex;
        flex-direction: row;
        justify-content: $v;
        align-items: $val;
      }
    }
  }
}
@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
  $med : "xl";
  @each $key , $val in $align-values{
    @each $k , $v in $justify-values{
      .col-#{$key}-#{$k}-#{$med}{
        display: flex;
        flex-direction: column;
        justify-content: $v;
        align-items: $val;
      }
      .row-#{$key}-#{$k}-#{$med}{
        display: flex;
        flex-direction: row;
        justify-content: $v;
        align-items: $val;
      }
    }
  }
}



